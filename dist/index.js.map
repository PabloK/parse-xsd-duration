{"version":3,"sources":["../src/index.js"],"names":["UNITS","YEAR","MONTH","DAY","HOUR","MINUTE","SECOND","isValidXsdDuration","str","test","isNonEmptyString","input","length","isNegative","stripFirstChar","slice","unitToSeconds","unit","amount","toUpperCase","parseUnit","amt","parseFloat","isNaN","parsePeriod","period","exec","year","month","day","parseTime","time","hour","minute","second","parse","neg","duration","splitDuration","split","output","TypeError"],"mappings":"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","file":"index.js","sourcesContent":["const UNITS = {\n  YEAR: 31536000,\n  MONTH: 2628000,\n  DAY: 86400,\n  HOUR: 3600,\n  MINUTE: 60,\n  SECOND: 1\n}\n\n// Regex taken from https://www.w3.org/TR/xmlschema11-2/#duration-lexical-space\nconst isValidXsdDuration = (str) => /^-?P((([0-9]+Y([0-9]+M)?([0-9]+D)?|([0-9]+M)([0-9]+D)?|([0-9]+D))(T(([0-9]+H)([0-9]+M)?([0-9]+(\\.[0-9]+)?S)?|([0-9]+M)([0-9]+(\\.[0-9]+)?S)?|([0-9]+(\\.[0-9]+)?S)))?)|(T(([0-9]+H)([0-9]+M)?([0-9]+(\\.[0-9]+)?S)?|([0-9]+M)([0-9]+(\\.[0-9]+)?S)?|([0-9]+(\\.[0-9]+)?S))))$/.test(str)\nconst isNonEmptyString = (input) => (typeof input === 'string' && input.length > 0)\nconst isNegative = (str) => str[0] === '-'\nconst stripFirstChar = (str) => str.slice(1)\nconst unitToSeconds = (unit, amount) => UNITS[unit.toUpperCase()] * amount\n\nconst parseUnit = (unit, amount) => {\n  const amt = parseFloat(amount)\n  if (isNaN(amt)) return 0\n  return unitToSeconds(unit, amt)\n}\n\nconst parsePeriod = (period) => {\n  const [, year, month, day] = ((/^(?:(\\d+)Y)?(?:(\\d+)M)?(?:(\\d+)D)?$/g).exec(period) || [])\n\n  return parseUnit('year', year) +\n    parseUnit('month', month) +\n    parseUnit('day', day)\n}\n\nconst parseTime = (time) => {\n  const [, hour, minute, second] = ((/^(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?$/g).exec(time) || [])\n\n  return parseUnit('hour', hour) +\n    parseUnit('minute', minute) +\n    parseUnit('second', second)\n}\n\nconst parse = (str) => {\n  const neg = isNegative(str)\n  const duration = neg ? stripFirstChar(str) : str\n  const splitDuration = duration.split('T')\n  const period = stripFirstChar(splitDuration[0])\n  const time = splitDuration[1]\n\n  let output = 0\n  if (isNonEmptyString(period)) output += parsePeriod(period)\n  if (isNonEmptyString(time)) output += parseTime(time)\n  return neg ? -output : output\n}\n\nexport default (input) => {\n  // Throw error for non-string input\n  if (typeof input !== 'string') {\n    throw new TypeError('expected input to be a string')\n  }\n  // Return null for invalid input\n  if (!isValidXsdDuration(input)) return null\n  // Parse valid input\n  return parse(input)\n}\n"]}